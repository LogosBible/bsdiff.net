using System.Buffers.Binary;

namespace BsDiff.Tests;

public class BinaryPatchTests
{
	[Fact]
	public void CreateZeroesPatch()
	{
		var oldData = new byte[512];
		var newData = new byte[1024];
		AssertCreatePatch(oldData, newData, 140, 180);
	}

	[Fact]
	public void ApplyZeroesPatch()
	{
		var patch = new byte[]
		{
			0x42, 0x53, 0x44, 0x49, 0x46, 0x46, 0x34, 0x30, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x42, 0x5A, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59, 0x84, 0xB8, 0x33, 0x12, 0x00, 0x00,
			0x04, 0xC0, 0x40, 0x78, 0x00, 0x40, 0x00, 0x20, 0x00, 0x30, 0xCD, 0x00, 0x91, 0xA9, 0xA2, 0xD4,
			0x9A, 0xC7, 0x20, 0xF8, 0xBB, 0x92, 0x29, 0xC2, 0x84, 0x84, 0x25, 0xC1, 0x98, 0x90, 0x42, 0x5A,
			0x68, 0x39, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59, 0x1E, 0xAE, 0x55, 0x4D, 0x00, 0x00, 0x01, 0xC0,
			0x00, 0xC0, 0x00, 0x00, 0x08, 0x20, 0x00, 0x30, 0x80, 0x49, 0xEA, 0x06, 0xAE, 0x2E, 0xE4, 0x8A,
			0x70, 0xA1, 0x20, 0x3D, 0x5C, 0xAA, 0x9A, 0x42, 0x5A, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26, 0x53,
			0x59, 0x1E, 0xAE, 0x55, 0x4D, 0x00, 0x00, 0x01, 0xC0, 0x00, 0xC0, 0x00, 0x00, 0x08, 0x20, 0x00,
			0x30, 0x80, 0x49, 0xEA, 0x06, 0xAE, 0x2E, 0xE4, 0x8A, 0x70, 0xA1, 0x20, 0x3D, 0x5C, 0xAA, 0x9A,
		};
		AssertApplyPatch(new byte[512], new byte[1024], patch);
	}

	[Fact]
	public void CreateLargeZeroesPatch()
	{
		var oldData = new byte[32000];
		var newData = new byte[54000];
		AssertCreatePatch(oldData, newData, 160, 190);
	}

	[Fact]
	public void ApplyLargeZeroesPatch()
	{
		var patch = new byte[172]
		{
			0x42, 0x53, 0x44, 0x49, 0x46, 0x46, 0x34, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x42, 0x5A, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59, 0xD9, 0xFD, 0x7B, 0xB0, 0x00, 0x00,
			0x06, 0x40, 0xC0, 0x78, 0x00, 0x00, 0x02, 0x40, 0x00, 0x20, 0x00, 0x30, 0xC0, 0x06, 0x35, 0x32,
			0x52, 0x0D, 0x2D, 0x47, 0xA1, 0xE2, 0xEE, 0x48, 0xA7, 0x0A, 0x12, 0x1B, 0x3F, 0xAF, 0x76, 0x00,
			0x42, 0x5A, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59, 0x8E, 0x14, 0x8B, 0xDA, 0x00, 0x00,
			0x3E, 0xC0, 0x80, 0xC0, 0x00, 0x00, 0x20, 0x00, 0x08, 0x20, 0x00, 0x30, 0xCC, 0x09, 0xAA, 0x69,
			0x90, 0x6D, 0x50, 0x3C, 0x5D, 0xC9, 0x14, 0xE1, 0x42, 0x42, 0x38, 0x52, 0x2F, 0x68, 0x42, 0x5A,
			0x68, 0x39, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59, 0x8E, 0x14, 0x8B, 0xDA, 0x00, 0x00, 0x3E, 0xC0,
			0x80, 0xC0, 0x00, 0x00, 0x20, 0x00, 0x08, 0x20, 0x00, 0x30, 0xCC, 0x09, 0xAA, 0x69, 0x90, 0x6D,
			0x50, 0x3C, 0x5D, 0xC9, 0x14, 0xE1, 0x42, 0x42, 0x38, 0x52, 0x2F, 0x68,
		};

		AssertApplyPatch(new byte[32000], new byte[64000], patch);
	}

	[Fact]
	public void CreateRangePatch()
	{
		var oldData = Enumerable.Range(0, 512).Select(x => (byte) x).ToArray();
		var newData = oldData.Concat(oldData).Concat(oldData).ToArray();
		AssertCreatePatch(oldData, newData, 120, 150);
	}

	[Fact]
	public void ApplyRangePatch()
	{
		var oldData = Enumerable.Range(0, 512).Select(x => (byte) x).ToArray();
		var newData = oldData.Concat(oldData).Concat(oldData).ToArray();
		var patch = new byte[138]
		{
			0x42, 0x53, 0x44, 0x49, 0x46, 0x46, 0x34, 0x30, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x42, 0x5A, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59, 0xC5, 0xB9, 0x45, 0xA1, 0x00, 0x00,
			0x0F, 0x40, 0x40, 0x70, 0x08, 0x40, 0x00, 0x20, 0x00, 0x30, 0xCD, 0x00, 0x85, 0x04, 0x99, 0x06,
			0x02, 0x70, 0x49, 0x49, 0xC9, 0x2B, 0xA9, 0xE2, 0xEE, 0x48, 0xA7, 0x0A, 0x12, 0x18, 0xB7, 0x28,
			0xB4, 0x20, 0x42, 0x5A, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59, 0x7E, 0x87, 0x38, 0x36,
			0x00, 0x00, 0x03, 0x40, 0x00, 0xD0, 0x00, 0x00, 0x08, 0x20, 0x00, 0x30, 0xCC, 0x08, 0x9A, 0x43,
			0x40, 0xBC, 0x5D, 0xC9, 0x14, 0xE1, 0x42, 0x41, 0xFA, 0x1C, 0xE0, 0xD8, 0x42, 0x5A, 0x68, 0x39,
			0x17, 0x72, 0x45, 0x38, 0x50, 0x90, 0x00, 0x00, 0x00, 0x00,
		};
		AssertApplyPatch(oldData, newData, patch);
	}

	[Fact]
	public void CreateFirstSentencePatch()
	{
		var oldData = "It was a dark and stormy night."u8.ToArray();
		var newData = "It was the best of times, it was the worst of times."u8.ToArray();
		AssertCreatePatch(oldData, newData, 170, 190);
	}

	[Fact]
	public void ApplyFirstSentencePatch()
	{
		var oldData = "It was a dark and stormy night."u8.ToArray();
		var newData = "It was the best of times, it was the worst of times."u8.ToArray();
		var patch = new byte[180]
		{
			0x42, 0x53, 0x44, 0x49, 0x46, 0x46, 0x34, 0x30, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x42, 0x5A, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59, 0x83, 0x87, 0xC9, 0xF8, 0x00, 0x00,
			0x07, 0xF0, 0x00, 0x48, 0x80, 0x00, 0x80, 0x00, 0x02, 0x20, 0x00, 0x30, 0xCD, 0x00, 0xC1, 0xA6,
			0x0C, 0x93, 0x1F, 0x17, 0x72, 0x45, 0x38, 0x50, 0x90, 0x83, 0x87, 0xC9, 0xF8, 0x42, 0x5A, 0x68,
			0x39, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59, 0x7E, 0xFB, 0x36, 0xB9, 0x00, 0x00, 0x00, 0x40, 0x00,
			0x48, 0x00, 0x20, 0x00, 0x21, 0x00, 0x82, 0x83, 0x17, 0x72, 0x45, 0x38, 0x50, 0x90, 0x7E, 0xFB,
			0x36, 0xB9, 0x42, 0x5A, 0x68, 0x39, 0x31, 0x41, 0x59, 0x26, 0x53, 0x59, 0x89, 0x58, 0x06, 0x2B,
			0x00, 0x00, 0x13, 0x91, 0x80, 0x40, 0x05, 0x33, 0x62, 0x9C, 0x80, 0x20, 0x00, 0x31, 0x4C, 0x00,
			0x00, 0x94, 0x83, 0x46, 0x8D, 0x3D, 0x23, 0xDD, 0x0A, 0x0B, 0xE7, 0x05, 0x6B, 0xA7, 0x89, 0x44,
			0x03, 0xA2, 0xC6, 0xF2, 0xBA, 0xD5, 0x26, 0xEA, 0x18, 0xF8, 0xBB, 0x92, 0x29, 0xC2, 0x84, 0x84,
			0x4A, 0xC0, 0x31, 0x58,
		};

		AssertApplyPatch(oldData, newData, patch);
	}

	private static void AssertCreatePatch(byte[] oldData, byte[] newData, int expectedLengthLow, int expectedLengthHigh)
	{
		using var outputStream = new MemoryStream();
		BinaryPatchUtility.Create(oldData, newData, outputStream);
		var patch = outputStream.ToArray();
		Assert.InRange(patch.Length, expectedLengthLow, expectedLengthHigh);
		AssertHeader(patch.AsSpan(0, 32), newData.Length);
	}

	private static void AssertHeader(ReadOnlySpan<byte> header, int newFileLength)
	{
		Assert.Equal("BSDIFF40"u8.ToArray(), header[..8].ToArray());
		Assert.Equal((ulong) newFileLength, BinaryPrimitives.ReadUInt64LittleEndian(header[24..32]));
	}

	private static void AssertApplyPatch(byte[] oldData, byte[] newData, byte[] patch)
	{
		using var inputStream = new MemoryStream(oldData);
		using var outputStream = new MemoryStream();
		BinaryPatchUtility.Apply(inputStream, () => new MemoryStream(patch), outputStream);
		Assert.Equal(newData, outputStream.ToArray());
	}
}
